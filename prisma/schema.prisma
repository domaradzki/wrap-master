// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Document {
  id             String    @id @default(cuid())
  documentId     String    @unique
  dateInsert     DateTime
  details        String
  documentStatus Int
  deliveryAdress String
  symbol         String
  signature      String
  trader         String
  companyId      String
  currency       String
  exchangeRate   Float?
  timestamp      Int
  closed         Boolean
  paymentMethod  String
  transport      String
  paymentDate    DateTime?
  company        Company   @relation(fields: [companyId], references: [id])
  orders         Order[]
}

model Company {
  id        String     @id @default(cuid())
  companyId String     @unique
  name      String
  documents Document[]
}

model Order {
  id                String    @id @default(cuid())
  orderId           Int       @unique
  documentId        String
  document          Document  @relation(fields: [documentId], references: [documentId])
  netValue          Float
  price             Float
  quantity          Int
  margin            Float?
  postfix           String?
  dateOfRealisation DateTime?
  productId         Int?
  product           Product?  @relation(fields: [productId], references: [productId])
}

model Product {
  id          String  @id @default(cuid())
  productId   Int     @unique
  assortment  String
  code        String
  kind        String
  type        String
  unit        String
  productCode String?
  orders      Order[]
  stretch     FS?
  tape        Tape?
}

model FS {
  id               String  @id @default(cuid())
  sleeve           Int?
  stretchThickness Int?
  netWeight        Float?
  grossWeight      Float?
  stretchColor     String?
  productId        String  @unique
  product          Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Tape {
  id               String    @id @default(cuid())
  tapeLong         Int?
  tapeWidth        Int?
  tapeThickness    Int?
  numberOfColors   Int?
  glue             String?
  tapeColor        String?
  color1           String?
  color2           String?
  color3           String?
  dateOfAcceptaion DateTime?
  printName        String?
  productId        String    @unique
  product          Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}
